// Bill Ni 
// APCS1 pd2 
// HW19--gcd 3 ways
// 2017-10-06

public class Stats{
	public static void main( String[] args ){}

	public static int mean(int a, int b){
		return ((a + b) / 2);
	}

	public static double mean(double a, double b){
		return ((a + b) / 2);
	}

	public static int max(int a, int b){
		if (a >= b) {
			return a;
		} else {
			return b;
		}
	}

	public static int max(int a, int b, int c){
		return max(max(a,b),c);
	}

	public static double max(double a, double b){
		if (a >= b) {
			return a;
		} else {
			return b;
		}
	}

	public static double max(double a, double b, double c){
		return max(max(a,b),c);
	}

	public static int min(int a, int b){
		if (a <= b) {
			return a;
		} else {
			return b;
		}
	}

	public static int min(int a, int b, int c){
		return min(min(a,b),c);
	}

	public static double min(double a, double b){
		if (a <= b) {
			return a;
		} else {
			return b;
		}
	}

	public static double min(double a, double b, double c){
		return min(min(a,b),c);
	}

	public static int geoMean(int a, int b){
		return (int) Math.sqrt(a * b);
	}

	public static int geoMean(int a, int b, int c){
		return (int) Math.pow((a * b * c), (1.0 / 3));
	}

	public static double geoMean(double a, double b){
		return Math.sqrt(a * b);
	}

	public static double geoMean(double a, double b, double c){
		return Math.pow((a * b * c), (1.0 / 3));
	}

	public static int gcd(int a, int b){
		int d = 1;
		int c = min(a,b);
		int gcd = 0;
		while (d <= c){
			if ((a % d == 0) && (b % d == 0)){
				gcd = d;
			}
			d += 1;
		}
		return gcd;
	}

	/*
	Euclid's Algo

	1. Maintain 2 parameters
	2. Find the greater one
	3. Replace it with itself modulo the other one
	4. Repeat until one of them reaches 0
	5. Return non-zero variable
	*/

	public static int gcdER(int a, int b){
		if (a == 0){
			return b;
		}else if (b == 0){
			return a;
		}else{
			int maxAB = max(a,b);
			int minAB = min(a,b);
			return gcdER(maxAB % minAB, minAB);
		}
	}

	public static int gcdEW(int a, int b){
		while (a != 0 && b != 0){
			if (a > b){
				a = a % b;
			}else{
				b = b % a;
			}
		}
		return max(a,b);
	}

}